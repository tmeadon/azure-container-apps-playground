
name: Build and Deploy
on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        services: [ {'imageName': 'frontend', 'directory': './apps/frontend'}, {'imageName': 'backend', 'directory': './apps/backend'} ]
    permissions:
      contents: read
      packages: write
    outputs:
      version: ${{ steps.image-tag.outputs.version }}
    steps:
      - name: checkout repository
        uses: actions/checkout@v2

      - name: connect to acr
        if: github.event_name != 'pull_request'
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: extract docker metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ matrix.services.imageName }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=ref,event=branch
            type=sha
  
      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ${{ matrix.services.directory }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      
      - name: Output image tag
        id: image-tag
        run: echo "::set-output name=version::sha-$(git rev-parse --short HEAD)" | tr '[:upper:]' '[:lower:]'
  
  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: checkout repository
        uses: actions/checkout@v2

      - name: azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: deploy bicep
        uses: azure/CLI@v1
        with: 
          azcliversion: 2.29.2
          inlineScript: |
            az deployment sub create -l northeurope -f ./iac/main.bicep -p frontendImageName=frontend frontendImageVersion='${{ needs.build.outputs.version }}'